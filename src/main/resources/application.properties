

server.servlet.context-path=/app
server.port=8080

#propiedades y valores se pueden asignar a archivo(clases)
value.name=Gerson
value.apellido=Ep
Value.random=${random.value}

#Crear propiedades a partir de una clase que representara las propiedades(package:pojo)
#user.email=test@gmail.com
#user.password=123467
#user.age=27

#En este recurso porgramamos los niveles de log que queremos mostrar en el servidor
#por defencto los log vienen en el servidor, son los que estan comentados
#logging.level.root=info
#logging.level.org.springframework.web=info
#logging.level.org.hibernate=error

#para ver el funcionamiento se cambian los niveles de log y se reinicia el servidor para ver.
logging.level.root=info 
logging.level.org.springframework.web=info   
logging.level.org.hibernate=error 

#muestra codigo sql que se genera a nivel del servidor
spring.jpa.show-sql=true  

#seleccionar + ctrl+ /   :sele para comentar

#configuracion de la BD a nivel de properties: ejem: relacionado a la base de datos H2
#spring.datasource.url=jdbc:h2:mem:testdb    #url y nombre de BD
#spring.datasource.driveClassName=org.h2.Driver   #driver escane la BD dada
#spring.datasource.username=sa #usuario
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.h2Dialect  #dialecto o implementacion a nivel de BD

#con la configuracion anterior de la BD ya podemos crear nuestro repository y podemos crear eliminar mostrar, etc. valores de la BD

#En Springboot configura toda esas dependencias lo podemos hacer de forma manual
#Por lo que la configuracion a nivel de base de datos la haremos en la carpeta configuracion: componente-GeneralConfiguration







